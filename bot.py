import time
import logging
from fpdf import FPDF
import os
import asyncio
import tempfile

from aiofiles import tempfile as aio_tempfile
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
import psycopg2
from psycopg2 import sql

logging.basicConfig(level=logging.INFO)

DATABASE_URL = os.environ.get("DATABASE_URL") or "postgresql://postgres:postgresd@localhost:5432/test"
conn = psycopg2.connect(DATABASE_URL)
cursor = conn.cursor()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username VARCHAR(100),
        registration_date DATE DEFAULT CURRENT_DATE
    );

    CREATE TABLE IF NOT EXISTS gifts (
        gift_id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id),
        title VARCHAR(70) NOT NULL,
        description TEXT,
        link TEXT
    );
''')
conn.commit()

TOKEN = ""
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# Main menu keyboard
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–∞—Ä–∫–∏"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"))
main_menu.add(KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"), KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"))
main_menu.add(KeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∏—à-–ª–∏—Å—Ç–æ–º"))


class Form(StatesGroup):
    add_item_name = State()
    add_item_description = State()
    add_item_link = State()
    edit_item_select = State()
    edit_item_field = State()
    edit_item_value = State()
    delete_item_select = State()  # New state for selecting gift to delete


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.first_name
    logging.info(f'{user_id=} {username=} {time.asctime()}')

    try:
        cursor.execute(
            "INSERT INTO users (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING",
            (user_id, username),
        )
        conn.commit()
    except Exception as e:
        logging.error(f"Error inserting user data: {e}")

    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {username}! üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ wish_u_all_the_best! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º –∂–µ–ª–∞–Ω–∏–π. üòä",
        reply_markup=main_menu
    )


@dp.message_handler(lambda message: message.text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–∞—Ä–∫–∏")
async def view_wishlist_handler(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT title, description, link FROM gifts WHERE user_id = %s", (user_id,))
    items = cursor.fetchall()

    if items:
        response = "üéÅ –í–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π:\n\n"
        for title, description, link in items[:20]:
            response += f"üîπ {title} - {description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n{link}\n\n"
    else:
        response = "–í–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç."

    await message.reply(response, reply_markup=main_menu)


@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
async def add_item_name(message: types.Message):
    await Form.add_item_name.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ (–Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤):")


@dp.message_handler(state=Form.add_item_name)
async def add_item_description(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 3:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(name=name)
    await Form.add_item_description.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:")


@dp.message_handler(state=Form.add_item_description)
async def add_item_link(message: types.Message, state: FSMContext):
    description = message.text.strip()
    await state.update_data(description=description)
    await Form.add_item_link.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")


@dp.message_handler(state=Form.add_item_link)
async def add_gift(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    link = message.text.strip()
    data = await state.get_data()

    try:
        cursor.execute(
            "INSERT INTO gifts (user_id, title, description, link) VALUES (%s, %s, %s, %s)",
            (user_id, data['name'], data.get('description', ''), link)
        )
        conn.commit()
        await message.reply("–ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π!", reply_markup=main_menu)
    except Exception as e:
        logging.error(f"Error inserting gift: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.finish()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
async def edit_gift_start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT gift_id, title FROM gifts WHERE user_id = %s", (user_id,))
    items = cursor.fetchall()

    if items:
        response = "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        for gift_id, title in items:
            response += f"{gift_id}. {title}\n"
        await Form.edit_item_select.set()
        await message.reply(response)
    else:
        await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç.", reply_markup=main_menu)


@dp.message_handler(state=Form.edit_item_select)
async def select_field_to_edit(message: types.Message, state: FSMContext):
    gift_id = message.text.strip()
    if not gift_id.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞.")
        return

    await state.update_data(gift_id=gift_id)
    await Form.edit_item_field.set()
    await message.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞)")


@dp.message_handler(state=Form.edit_item_field)
async def edit_field_value(message: types.Message, state: FSMContext):
    field = message.text.lower().strip()
    if field not in ["–Ω–∞–∑–≤–∞–Ω–∏–µ", "–æ–ø–∏—Å–∞–Ω–∏–µ", "—Å—Å—ã–ª–∫–∞"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞.")
        return

    await state.update_data(field=field)
    await Form.edit_item_value.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è:")


@dp.message_handler(state=Form.edit_item_value)
async def save_edited_gift(message: types.Message, state: FSMContext):
    data = await state.get_data()
    field_map = {"–Ω–∞–∑–≤–∞–Ω–∏–µ": "title", "–æ–ø–∏—Å–∞–Ω–∏–µ": "description", "—Å—Å—ã–ª–∫–∞": "link"}
    field = field_map[data['field']]
    value = message.text.strip()

    try:
        cursor.execute(
            sql.SQL("UPDATE gifts SET {} = %s WHERE gift_id = %s").format(sql.Identifier(field)),
            (value, data['gift_id']),
        )
        conn.commit()
    except Exception as e:
        logging.error(f"Error updating gift: {e}")

    await message.reply("üéâ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=main_menu)
    await state.finish()


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
@dp.message_handler(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
async def delete_gift_start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT gift_id, title FROM gifts WHERE user_id = %s", (user_id,))
    items = cursor.fetchall()

    if items:
        response = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        for gift_id, title in items:
            response += f"{gift_id}. {title}\n"
        await Form.delete_item_select.set()
        await message.reply(response)
    else:
        await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç.", reply_markup=main_menu)


@dp.message_handler(state=Form.delete_item_select)
async def delete_gift_confirm(message: types.Message, state: FSMContext):
    gift_id = message.text.strip()
    if not gift_id.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞.")
        return

    cursor.execute("SELECT title FROM gifts WHERE gift_id = %s AND user_id = %s", (gift_id, message.from_user.id))
    gift = cursor.fetchone()
    if gift:
        title = gift[0]
        try:
            cursor.execute("DELETE FROM gifts WHERE gift_id = %s AND user_id = %s", (gift_id, message.from_user.id))
            conn.commit()
            await message.reply(f"üéâ –ü–æ–¥–∞—Ä–æ–∫ '{title}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π!",
                                reply_markup=main_menu)
        except Exception as e:
            logging.error(f"Error deleting gift: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await message.reply("–ü–æ–¥–∞—Ä–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()

def create_html_file(data):
    html_content = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Wishlist</title>
        <style>
            body {{ font-family: Arial, sans-serif; }}
            h1 {{ color: #333; }}
            .gift {{ margin-bottom: 15px; }}
        </style>
    </head>
    <body>
        <h1>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ üéÅ</h1>
        {data}
    </body>
    </html>
    """
    with tempfile.NamedTemporaryFile(delete=False, suffix=".html") as tmp_file:
        tmp_file.write(html_content.encode('utf-8'))
        return tmp_file.name


@dp.message_handler(lambda message: message.text == "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∏—à-–ª–∏—Å—Ç–æ–º")
async def export_wishlist_handler(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT title, description, link FROM gifts WHERE user_id = %s", (user_id,))
    gifts = cursor.fetchall()

    if not gifts:
        await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        return

    gift_list_html = ""
    for title, description, link in gifts:
        gift_list_html += f"<div class='gift'><h3>{title}</h3><p>{description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p><a href='{link}' target='_blank'>{link or '–ù–µ—Ç —Å—Å—ã–ª–∫–∏'}</a></div>"

    file_path = create_html_file(gift_list_html)

    await message.reply_document(InputFile(file_path), caption="–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML üéâ")
    os.remove(file_path)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Error in main polling: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
